(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
import React from 'react';

import { css, styled, t } from '@superset-ui/core';import { jsx as ___EmotionJSX } from "@emotion/react";


const TooltipSectionWrapper = styled.div`
  ${({ theme }) => css`
    display: flex;
    flex-direction: column;
    font-size: ${theme.typography.sizes.s}px;
    line-height: 1.2;

    &:not(:last-of-type) {
      margin-bottom: ${theme.gridUnit * 2}px;
    }
  `}
`;

const TooltipSectionLabel = styled.span`
  ${({ theme }) => css`
    font-weight: ${theme.typography.weights.bold};
  `}
`;

const TooltipSection = ({
  label,
  text }) =>




___EmotionJSX(TooltipSectionWrapper, null,
___EmotionJSX(TooltipSectionLabel, null, label),
___EmotionJSX("span", null, text));



export const isLabelTruncated = (labelRef) =>
!!(
labelRef &&
labelRef.current &&
labelRef.current.scrollWidth > labelRef.current.clientWidth);


export const getColumnLabelText = (column) =>
column.verbose_name || column.column_name;

export const getColumnTooltipNode = (
column,
labelRef) =>
{
  if (
  !column.verbose_name &&
  !column.description &&
  !isLabelTruncated(labelRef))
  {
    return null;
  }

  return (
    ___EmotionJSX(React.Fragment, null,
    ___EmotionJSX(TooltipSection, { label: t('Column name'), text: column.column_name }),
    column.verbose_name &&
    ___EmotionJSX(TooltipSection, { label: t('Label'), text: column.verbose_name }),

    column.description &&
    ___EmotionJSX(TooltipSection, { label: t('Description'), text: column.description })));



};



export const getMetricTooltipNode = (
metric,
labelRef) =>
{
  if (
  !metric.verbose_name &&
  !metric.description &&
  !metric.label &&
  !isLabelTruncated(labelRef))
  {
    return null;
  }

  return (
    ___EmotionJSX(React.Fragment, null,
    ___EmotionJSX(TooltipSection, { label: t('Metric name'), text: metric.metric_name }),
    (metric.label || metric.verbose_name) &&
    ___EmotionJSX(TooltipSection, {
      label: t('Label'),
      text: metric.label || metric.verbose_name }),


    metric.description &&
    ___EmotionJSX(TooltipSection, { label: t('Description'), text: metric.description })));



};;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(TooltipSectionWrapper, "TooltipSectionWrapper", "/Users/ville/src/superset-release/superset-frontend/packages/superset-ui-chart-controls/src/components/labelUtils.tsx");reactHotLoader.register(TooltipSectionLabel, "TooltipSectionLabel", "/Users/ville/src/superset-release/superset-frontend/packages/superset-ui-chart-controls/src/components/labelUtils.tsx");reactHotLoader.register(TooltipSection, "TooltipSection", "/Users/ville/src/superset-release/superset-frontend/packages/superset-ui-chart-controls/src/components/labelUtils.tsx");reactHotLoader.register(isLabelTruncated, "isLabelTruncated", "/Users/ville/src/superset-release/superset-frontend/packages/superset-ui-chart-controls/src/components/labelUtils.tsx");reactHotLoader.register(getColumnLabelText, "getColumnLabelText", "/Users/ville/src/superset-release/superset-frontend/packages/superset-ui-chart-controls/src/components/labelUtils.tsx");reactHotLoader.register(getColumnTooltipNode, "getColumnTooltipNode", "/Users/ville/src/superset-release/superset-frontend/packages/superset-ui-chart-controls/src/components/labelUtils.tsx");reactHotLoader.register(getMetricTooltipNode, "getMetricTooltipNode", "/Users/ville/src/superset-release/superset-frontend/packages/superset-ui-chart-controls/src/components/labelUtils.tsx");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();