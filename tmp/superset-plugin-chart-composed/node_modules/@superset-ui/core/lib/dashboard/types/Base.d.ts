/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
import { AdhocFilter, DataMask } from '@superset-ui/core';
export interface NativeFilterColumn {
    name: string;
    displayName?: string;
}
export interface NativeFilterScope {
    rootPath: string[];
    excluded: number[];
}
/** The target of a filter is the datasource/column being filtered */
export interface NativeFilterTarget {
    datasetId: number;
    column: NativeFilterColumn;
}
export declare enum NativeFilterType {
    NATIVE_FILTER = "NATIVE_FILTER",
    DIVIDER = "DIVIDER"
}
export declare enum DataMaskType {
    NativeFilters = "nativeFilters",
    CrossFilters = "crossFilters"
}
export declare type DataMaskState = {
    [id: string]: DataMask;
};
export declare type DataMaskWithId = {
    id: string;
} & DataMask;
export declare type DataMaskStateWithId = {
    [filterId: string]: DataMaskWithId;
};
export declare type FilterSet = {
    id: number;
    name: string;
    nativeFilters: Filters;
    dataMask: DataMaskStateWithId;
};
export declare type FilterSets = {
    [filtersSetId: string]: FilterSet;
};
export declare type Filter = {
    cascadeParentIds: string[];
    defaultDataMask: DataMask;
    id: string;
    name: string;
    scope: NativeFilterScope;
    filterType: string;
    targets: [Partial<NativeFilterTarget>];
    controlValues: {
        [key: string]: any;
    };
    sortMetric?: string | null;
    adhoc_filters?: AdhocFilter[];
    granularity_sqla?: string;
    granularity?: string;
    druid_time_origin?: string;
    time_grain_sqla?: string;
    time_range?: string;
    requiredFirst?: boolean;
    tabsInScope?: string[];
    chartsInScope?: number[];
    type: typeof NativeFilterType.NATIVE_FILTER;
    description: string;
};
export declare type Divider = Partial<Omit<Filter, 'id' | 'type'>> & {
    id: string;
    title: string;
    description: string;
    type: typeof NativeFilterType.DIVIDER;
};
export declare function isNativeFilter(filterElement: Filter | Divider): filterElement is Filter;
export declare function isFilterDivider(filterElement: Filter | Divider): filterElement is Divider;
export declare type FilterConfiguration = Array<Filter | Divider>;
export declare type Filters = {
    [filterId: string]: Filter | Divider;
};
export declare type NativeFiltersState = {
    filters: Filters;
    filterSets: FilterSets;
    focusedFilterId?: string;
};
export declare type DashboardComponentMetadata = {
    nativeFilters: NativeFiltersState;
    dataMask: DataMaskStateWithId;
};
//# sourceMappingURL=Base.d.ts.map