/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
export default class ChartMetadata {
    name;
    canBeAnnotationTypes;
    canBeAnnotationTypesLookup;
    credits;
    description;
    show;
    supportedAnnotationTypes;
    thumbnail;
    useLegacyApi;
    behaviors;
    datasourceCount;
    enableNoResults;
    exampleGallery;
    tags;
    category;
    deprecated;
    label;
    labelExplanation;
    constructor(config) {
        const { name, canBeAnnotationTypes = [], credits = [], description = '', show = true, supportedAnnotationTypes = [], thumbnail, useLegacyApi = false, behaviors = [], datasourceCount = 1, enableNoResults = true, exampleGallery = [], tags = [], category = null, deprecated = false, label = null, labelExplanation = null, } = config;
        this.name = name;
        this.credits = credits;
        this.description = description;
        this.show = show;
        this.canBeAnnotationTypes = canBeAnnotationTypes;
        this.canBeAnnotationTypesLookup = canBeAnnotationTypes.reduce((prev, type) => {
            const lookup = prev;
            lookup[type] = true;
            return lookup;
        }, {});
        this.supportedAnnotationTypes = supportedAnnotationTypes;
        this.thumbnail = thumbnail;
        this.useLegacyApi = useLegacyApi;
        this.behaviors = behaviors;
        this.datasourceCount = datasourceCount;
        this.enableNoResults = enableNoResults;
        this.exampleGallery = exampleGallery;
        this.tags = tags;
        this.category = category;
        this.deprecated = deprecated;
        this.label = label;
        this.labelExplanation = labelExplanation;
    }
    canBeAnnotationType(type) {
        return this.canBeAnnotationTypesLookup[type] || false;
    }
    clone() {
        return new ChartMetadata(this);
    }
}
//# sourceMappingURL=ChartMetadata.js.map