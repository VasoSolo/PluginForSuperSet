(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

import tinycolor from 'tinycolor2';
import { CategoricalColorNamespace } from '.';
import makeSingleton from '../utils/makeSingleton';

export class SharedLabelColor {


  constructor() {this.sliceLabelColorMap = void 0;
    // { sliceId1: { label1: color1 }, sliceId2: { label2: color2 } }
    this.sliceLabelColorMap = {};
  }

  getColorMap(
  colorNamespace,
  colorScheme,
  updateColorScheme)
  {
    if (colorScheme) {
      const categoricalNamespace =
      CategoricalColorNamespace.getNamespace(colorNamespace);
      const colors = categoricalNamespace.getScale(colorScheme).range();
      const sharedLabels = this.getSharedLabels();
      const generatedColors = [];
      let sharedLabelMap;

      if (sharedLabels.length) {
        const multiple = Math.ceil(sharedLabels.length / colors.length);
        const ext = 5;
        const analogousColors = colors.map((color) => {
          const result = tinycolor(color).analogous(multiple + ext);
          return result.slice(ext);
        });

        // [[A, AA, AAA], [B, BB, BBB]] => [A, B, AA, BB, AAA, BBB]
        while ((_analogousColors = analogousColors[analogousColors.length - 1]) != null && _analogousColors.length) {var _analogousColors;
          analogousColors.forEach((colors) =>
          generatedColors.push(colors.shift()));

        }
        sharedLabelMap = sharedLabels.reduce(
        (res, label, index) => {var _generatedColors$inde;return {
            ...res,
            [label.toString()]: (_generatedColors$inde = generatedColors[index]) == null ? void 0 : _generatedColors$inde.toHexString() };},

        {});

      }

      const labelMap = Object.keys(this.sliceLabelColorMap).reduce(
      (res, sliceId) => {
        const colorScale = categoricalNamespace.getScale(colorScheme);
        return {
          ...res,
          ...Object.keys(this.sliceLabelColorMap[sliceId]).reduce(
          (res, label) => ({
            ...res,
            [label]: updateColorScheme ?
            colorScale(label) :
            this.sliceLabelColorMap[sliceId][label] }),

          {}) };


      },
      {});


      return {
        ...labelMap,
        ...sharedLabelMap };

    }
    return undefined;
  }

  addSlice(label, color, sliceId) {
    if (!sliceId) return;
    this.sliceLabelColorMap[sliceId] = {
      ...this.sliceLabelColorMap[sliceId],
      [label]: color };

  }

  removeSlice(sliceId) {
    delete this.sliceLabelColorMap[sliceId];
  }

  clear() {
    this.sliceLabelColorMap = {};
  }

  getSharedLabels() {
    const tempLabels = new Set();
    const result = new Set();
    Object.keys(this.sliceLabelColorMap).forEach((sliceId) => {
      const colorMap = this.sliceLabelColorMap[sliceId];
      Object.keys(colorMap).forEach((label) => {
        if (tempLabels.has(label) && !result.has(label)) {
          result.add(label);
        } else {
          tempLabels.add(label);
        }
      });
    });
    return [...result];
  } // @ts-ignore
  __reactstandin__regenerateByEval(key, code) {// @ts-ignore
    this[key] = eval(code);}}
const getInstance = makeSingleton(SharedLabelColor);const _default =

getInstance;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(SharedLabelColor, "SharedLabelColor", "/Users/ville/src/superset-release/superset-frontend/packages/superset-ui-core/src/color/SharedLabelColorSingleton.ts");reactHotLoader.register(getInstance, "getInstance", "/Users/ville/src/superset-release/superset-frontend/packages/superset-ui-core/src/color/SharedLabelColorSingleton.ts");reactHotLoader.register(_default, "default", "/Users/ville/src/superset-release/superset-frontend/packages/superset-ui-core/src/color/SharedLabelColorSingleton.ts");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();